spring:
  application:
    name: todo-app-backend
  
  datasource:
    url: jdbc:postgresql://localhost:5432/personalhub
    username: personalhub
    password: personalhub
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        use_sql_comments: true
        jdbc:
          time_zone: Asia/Tokyo
    open-in-view: false
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 0
  
  security:
    user:
      name: admin
      password: admin
  
  mvc:
    throw-exception-if-no-handler-found: true
  
  web:
    resources:
      add-mappings: false

server:
  port: 8080
  error:
    whitelabel:
      enabled: false
    include-message: always
    include-binding-errors: always

app:
  frontend-url: ${APP_FRONTEND_URL:http://localhost:3000}
  
  email:
    provider: ${APP_EMAIL_PROVIDER:mock} # mock, smtp, sendgrid, or brevo
    from: ${APP_EMAIL_FROM:noreply@personalhub.com}
    from-name: ${APP_EMAIL_FROM_NAME:Personal Hub}
  
  security:
    jwt:
      secret-key: ${JWT_SECRET_KEY:your-secret-key-that-is-at-least-256-bits-long-for-HS256-algorithm-security}
      expiration: ${JWT_EXPIRATION:3600000} # 1 hour in milliseconds (increased for development)
      key-id: ${JWT_KEY_ID:default-key}
    
    rate-limit:
      auth:
        capacity: ${RATE_LIMIT_AUTH_CAPACITY:1000} # Max 1000 requests per IP (increased for testing)
        refill-tokens: ${RATE_LIMIT_AUTH_REFILL:1000}
        refill-period-minutes: ${RATE_LIMIT_AUTH_PERIOD:1} # Refill every minute (faster for testing)
      general:
        capacity: ${RATE_LIMIT_GENERAL_CAPACITY:1000} # Max 1000 requests per IP
        refill-tokens: ${RATE_LIMIT_GENERAL_REFILL:1000}
        refill-period-minutes: ${RATE_LIMIT_GENERAL_PERIOD:1} # Refill every minute
  
  oidc:
    issuer: ${OIDC_ISSUER:http://localhost:8080}
    base-url: ${OIDC_BASE_URL:http://localhost:8080}
    authorization-code-ttl: ${OIDC_AUTH_CODE_TTL:600} # 10 minutes in seconds
    access-token-ttl: ${OIDC_ACCESS_TOKEN_TTL:900} # 15 minutes in seconds
    refresh-token-ttl: ${OIDC_REFRESH_TOKEN_TTL:2592000} # 30 days in seconds
    id-token-ttl: ${OIDC_ID_TOKEN_TTL:3600} # 1 hour in seconds

google:
  calendar:
    credentials:
      file: ${GOOGLE_CREDENTIALS_FILE:credentials.json}
    tokens:
      directory:
        path: ${GOOGLE_TOKENS_DIR:tokens}
    oauth:
      client:
        id: ${GOOGLE_CLIENT_ID:}
        secret: ${GOOGLE_CLIENT_SECRET:}
      redirect:
        uri: ${GOOGLE_REDIRECT_URI:http://localhost:8080/api/v1/calendar/sync/auth/callback}
  
  client:
    id: ${GOOGLE_OIDC_CLIENT_ID:}
    secret: ${GOOGLE_OIDC_CLIENT_SECRET:}
  
  redirect:
    uri: ${GOOGLE_OIDC_REDIRECT_URI:http://localhost:8080/api/v1/auth/oidc/google/callback}
  
  discovery:
    document:
      url: https://accounts.google.com/.well-known/openid-configuration

github:
  client:
    id: ${GITHUB_CLIENT_ID:}
    secret: ${GITHUB_CLIENT_SECRET:}
  redirect:
    uri: ${GITHUB_REDIRECT_URI:http://localhost:8080/api/v1/auth/oidc/github/callback}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

spring.mail:
  host: ${MAIL_HOST:smtp.gmail.com}
  port: ${MAIL_PORT:587}
  username: ${MAIL_USERNAME:}
  password: ${MAIL_PASSWORD:}
  properties:
    mail:
      smtp:
        auth: true
        starttls:
          enable: true
          required: true
        timeout: 5000
        connectiontimeout: 5000
        writetimeout: 5000

sendgrid:
  api-key: ${SENDGRID_API_KEY:}

brevo:
  api-key: ${BREVO_API_KEY:}
  api-url: ${BREVO_API_URL:https://api.brevo.com/v3}

logging:
  level:
    root: INFO
    com.zametech.todoapp: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.web: DEBUG
    org.springframework.security.access: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/todo-app.log