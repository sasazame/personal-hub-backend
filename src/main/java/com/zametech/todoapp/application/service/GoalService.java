package com.zametech.todoapp.application.service;

import com.zametech.todoapp.application.goal.dto.GoalTrackingInfo;
import com.zametech.todoapp.application.goal.dto.GoalWithTrackingResponse;
import com.zametech.todoapp.application.goal.dto.ToggleAchievementResponse;
import com.zametech.todoapp.domain.model.Goal;
import com.zametech.todoapp.domain.model.GoalAchievementHistory;
import com.zametech.todoapp.domain.model.GoalType;
import com.zametech.todoapp.domain.repository.GoalAchievementHistoryRepository;
import com.zametech.todoapp.domain.repository.GoalRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Transactional
public class GoalService {
    private final GoalRepository goalRepository;
    private final GoalAchievementHistoryRepository achievementHistoryRepository;
    private final UserContextService userContextService;

    public Goal createGoal(Goal goal) {
        UUID userId = userContextService.getCurrentUserId();
        goal.setUserId(userId);
        // ID will be generated by the database
        goal.setIsActive(true);
        goal.setCreatedAt(LocalDateTime.now());
        goal.setUpdatedAt(LocalDateTime.now());
        
        return goalRepository.save(goal);
    }

    public Goal updateGoal(Long goalId, Goal goalUpdate) {
        UUID userId = userContextService.getCurrentUserId();
        Goal existingGoal = goalRepository.findById(goalId)
                .filter(g -> g.getUserId().equals(userId))
                .orElseThrow(() -> new RuntimeException("Goal not found or access denied"));

        existingGoal.setTitle(goalUpdate.getTitle());
        existingGoal.setDescription(goalUpdate.getDescription());
        existingGoal.setIsActive(goalUpdate.getIsActive());
        existingGoal.setEndDate(goalUpdate.getEndDate());
        existingGoal.setUpdatedAt(LocalDateTime.now());

        return goalRepository.save(existingGoal);
    }

    public void deleteGoal(Long goalId) {
        UUID userId = userContextService.getCurrentUserId();
        if (!goalRepository.existsByIdAndUserId(goalId, userId)) {
            throw new RuntimeException("Goal not found or access denied");
        }
        
        goalRepository.deleteById(goalId);
    }

    public Goal getGoalById(Long goalId) {
        UUID userId = userContextService.getCurrentUserId();
        return goalRepository.findById(goalId)
                .filter(g -> g.getUserId().equals(userId))
                .orElseThrow(() -> new RuntimeException("Goal not found or access denied"));
    }

    public List<Goal> getUserGoals() {
        UUID userId = userContextService.getCurrentUserId();
        return goalRepository.findByUserId(userId);
    }

    public List<Goal> getActiveGoals() {
        UUID userId = userContextService.getCurrentUserId();
        return goalRepository.findByUserIdAndIsActive(userId, true);
    }

    public List<Goal> getGoalsByType(GoalType goalType) {
        UUID userId = userContextService.getCurrentUserId();
        return goalRepository.findByUserIdAndGoalType(userId, goalType);
    }

    public GoalWithTrackingResponse getGoalWithTracking(Long goalId) {
        Goal goal = getGoalById(goalId);
        
        // Create a simple tracking info
        GoalTrackingInfo trackingInfo = new GoalTrackingInfo(
            0,  // totalDays
            0,  // achievedDays
            0.0,  // achievementRate
            0,  // currentStreak
            0,  // longestStreak
            "not_started",  // todayStatus
            "not_started",  // currentPeriodStatus
            false  // currentPeriodAchieved
        );
        
        return new GoalWithTrackingResponse(
            goal.getId(),
            goal.getTitle(),
            goal.getDescription(),
            goal.getGoalType(),
            goal.getIsActive(),
            goal.getStartDate(),
            goal.getEndDate(),
            goal.getCreatedAt(),
            goal.getUpdatedAt(),
            trackingInfo
        );
    }

    public void resetWeeklyGoals() {
        UUID userId = userContextService.getCurrentUserId();
        List<Goal> weeklyGoals = goalRepository.findByUserIdAndGoalType(userId, GoalType.WEEKLY);
        
        for (Goal goal : weeklyGoals) {
            // For now, just update the timestamp
            goal.setUpdatedAt(LocalDateTime.now());
            goalRepository.save(goal);
        }
    }

    public ToggleAchievementResponse toggleAchievement(Long goalId) {
        Goal goal = getGoalById(goalId);
        LocalDate today = LocalDate.now();
        
        // Check if achievement exists for today
        GoalAchievementHistory existingAchievement = achievementHistoryRepository
                .findByGoalIdAndAchievedDate(goalId, today)
                .orElse(null);
        
        boolean achieved;
        Long achievementId = null;
        
        if (existingAchievement != null) {
            // Delete existing achievement (uncheck)
            achievementHistoryRepository.delete(existingAchievement);
            achieved = false;
        } else {
            // Create new achievement (check)
            GoalAchievementHistory newAchievement = new GoalAchievementHistory();
            // ID will be generated by the database
            newAchievement.setGoalId(goalId);
            newAchievement.setAchievedDate(today);
            newAchievement.setCreatedAt(LocalDateTime.now());
            
            GoalAchievementHistory saved = achievementHistoryRepository.save(newAchievement);
            achieved = true;
            achievementId = saved.getId();
        }
        
        return new ToggleAchievementResponse(
            goalId.toString(),  // goalId as String for backward compatibility
            goal.getGoalType().name(),  // periodType
            today.toString(),  // periodDate
            achieved,  // achieved
            achievementId != null ? achievementId.toString() : null  // achievementId as String
        );
    }
}